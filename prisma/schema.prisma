generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Simple Domain model for grouping documents by subject
model Domain {
  id          String   @id @default(uuid()) @db.Uuid
  slug        String   @unique // For URL friendly identifiers
  name        String
  description String?
  createdAt   DateTime @default(now()) @db.Timestamptz
  updatedAt   DateTime @updatedAt @db.Timestamptz
  userId      String   @db.Uuid // Associated user who created this domain
  color       String? // Optional color for UI representation
  icon        String? // Optional icon for UI representation

  // Relations
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  documents Document[]

  @@index([userId])
  @@index([slug])
  @@index([name]) // Add index for name searches
}

// Main content model with hierarchical structure
model Document {
  id        String   @id @default(uuid()) @db.Uuid
  handle    String?  @unique
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  authorId  String   @db.Uuid
  published Boolean  @default(false)
  private   Boolean  @default(false)
  domainId  String?  @db.Uuid // Optional domain association

  // Document-specific fields
  head   String? @db.Uuid
  collab Boolean @default(false)

  // Directory-specific fields (used when type is DIRECTORY)
  sort_order       Float?  @db.DoublePrecision
  background_image String?

  // Status field for marking documents as active, done, or neutral
  status DocumentStatus @default(NEUTRAL)

  // Fork relationship
  baseId String?    @db.Uuid
  base   Document?  @relation("BaseForks", fields: [baseId], references: [id])
  forks  Document[] @relation("BaseForks")

  // Hierarchical relationships
  parentId String?    @db.Uuid
  parent   Document?  @relation("DocumentHierarchy", fields: [parentId], references: [id])
  children Document[] @relation("DocumentHierarchy")

  // Type discrimination
  type DocumentType

  // Relations
  author    User                @relation(fields: [authorId], references: [id], onDelete: Cascade)
  coauthors DocumentCoauthers[]
  revisions Revision[]
  domain    Domain?             @relation(fields: [domainId], references: [id], onDelete: Cascade)

  @@index([domainId])
  @@index([authorId, domainId]) // Compound index for queries filtering by both author and domain
}

enum DocumentType {
  DOCUMENT
  DIRECTORY
}

enum DocumentStatus {
  NEUTRAL
  ACTIVE
  DONE
}

model Revision {
  id         String   @id @default(uuid()) @db.Uuid
  data       Json
  createdAt  DateTime @default(now())
  documentId String   @db.Uuid
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  authorId   String   @db.Uuid
  author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model User {
  id            String              @id @default(uuid()) @db.Uuid
  handle        String?             @unique
  name          String
  email         String              @unique
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  disabled      Boolean             @default(false)
  emailVerified DateTime?
  lastLogin     DateTime?
  image         String?
  role          String              @default("user")
  accounts      Account[]
  sessions      Session[]
  revisions     Revision[]
  documents     Document[]
  coauthored    DocumentCoauthers[]
  domains       Domain[] // User's domains for organizing documents
}

model DocumentCoauthers {
  documentId String   @db.Uuid
  userEmail  String
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  createdAt  DateTime @default(now())

  @@id([documentId, userEmail])
}

model Account {
  id                 String  @id @default(uuid()) @db.Uuid
  userId             String  @db.Uuid
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid()) @db.Uuid
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
