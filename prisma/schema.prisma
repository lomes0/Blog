generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Series model for organizing blog posts
model Series {
  id          String   @id @default(uuid()) @db.Uuid
  title       String
  description String?
  createdAt   DateTime @default(now()) @db.Timestamptz
  updatedAt   DateTime @updatedAt @db.Timestamptz
  authorId    String   @db.Uuid

  // Relations
  author User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  posts  Document[] @relation("SeriesPosts")

  @@index([authorId])
  @@index([title])
  @@index([authorId, createdAt])
}

// Main content model with hierarchical structure (used for both posts and directories)
model Document {
  id          String   @id @default(uuid()) @db.Uuid
  handle      String?  @unique
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  authorId    String   @db.Uuid
  published Boolean  @default(false)
  private   Boolean  @default(false)

  // Document-specific fields
  head   String? @db.Uuid
  collab Boolean @default(false)

  // Status field for marking documents as active or done
  status DocumentStatus @default(ACTIVE)

  // Series support for blog posts
  seriesId    String? @db.Uuid
  seriesOrder Int?    // Order of post within series

  // Background image for posts (optional)
  background_image String?

  // Sort order for documents (legacy, may be removed)
  sort_order Int?

  // Fork relationship
  baseId String?    @db.Uuid
  base   Document?  @relation("BaseForks", fields: [baseId], references: [id])
  forks  Document[] @relation("BaseForks")

  // Hierarchical relationships (for future features if needed)
  parentId String?    @db.Uuid
  parent   Document?  @relation("DocumentHierarchy", fields: [parentId], references: [id])
  children Document[] @relation("DocumentHierarchy")

  // Type discrimination
  type DocumentType

  // Relations
  author    User                @relation(fields: [authorId], references: [id], onDelete: Cascade)
  coauthors DocumentCoauthers[]
  revisions Revision[]
  series    Series?             @relation("SeriesPosts", fields: [seriesId], references: [id], onDelete: SetNull)

  @@index([seriesId])
  @@index([authorId, published]) // Index for finding user's published posts
  @@index([published, type]) // Index for finding published posts/documents
  @@index([seriesId, seriesOrder]) // Index for ordering posts within series
}

enum DocumentType {
  DOCUMENT
}

enum DocumentStatus {
  ACTIVE
  DONE
}

model Revision {
  id         String   @id @default(uuid()) @db.Uuid
  data       Json
  createdAt  DateTime @default(now())
  documentId String   @db.Uuid // References posts (Document with type DOCUMENT)
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  authorId   String   @db.Uuid
  author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([documentId])
  @@index([authorId])
}

model User {
  id            String              @id @default(uuid()) @db.Uuid
  handle        String?             @unique
  name          String
  email         String              @unique
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  disabled      Boolean             @default(false)
  emailVerified DateTime?
  lastLogin     DateTime?
  image         String?
  role          String              @default("user")
  accounts      Account[]
  sessions      Session[]
  revisions     Revision[]
  documents     Document[] // User's posts  
  coauthored    DocumentCoauthers[]
  series        Series[] // User's series for organizing blog posts

  @@index([email])
  @@index([handle])
}

model DocumentCoauthers {
  documentId String   @db.Uuid
  userEmail  String
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  createdAt  DateTime @default(now())

  @@id([documentId, userEmail])
}

model Account {
  id                 String  @id @default(uuid()) @db.Uuid
  userId             String  @db.Uuid
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid()) @db.Uuid
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
